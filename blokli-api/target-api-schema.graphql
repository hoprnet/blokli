type ChainInfo {
	"Current block number of the blockchain"
	blockNumber: Int!
	"Chain ID of the connected blockchain network"
	chainId: Int!
	"Current HOPR token price in wxHOPR"
	ticketPrice: Float!
	"Current Minimum ticket winning probability"
	minTicketWinningProbability: Float!
}

enum Token {
	"HOPR token"
	HOPR
	"Native token"
	NATIVE
}

type Balance {
	"Unique account on-chain address in hexadecimal format"
	address: String!
	"Token balance associated with the on-chain address"
	value: Float!
	"Type of token (HOPR or Native)"
	token: Token!
}

"""
Account information containing balances and multiaddresses
"""
type Account {
	"Unique account on-chain address in hexadecimal format"
	chainKey: String!
	"Unique account packet key in peer id format"
	packetKey: String!
	"wxHOPR balance associated with the on-chain address"
	accountHoprBalance: Float!
	"Native balance associated with the on-chain address"
	accountNativeBalance: Float!
	"HOPR Safe contract address to which the account is linked"
	safeAddress: String
	"wxHOPR balance associated with the linked Safe contract address"
	safeHoprBalance: Float
	"Native balance associated with the linked Safe contract address"
	safeNativeBalance: Float
	"List of multiaddresses associated with the packet key"
	multiAddresses: [String!]!
}

"""
Status of a payment channel
"""
enum ChannelStatus {
	"Channel is open and operational"
	OPEN
	"Channel is in the process of closing"
	PENDINGTOCLOSE
	"Channel has been closed"
	CLOSED
}

"""
Payment channel between two nodes
"""
type Channel {
	"Unique identifier for the payment channel in hexadecimal format"
	concreteChannelId: String!
	"On-chain address of the source node in hexadecimal format"
	source: String!
	"On-chain address of the destination node in hexadecimal format"
	destination: String!
	"Total amount of tokens allocated to the channel"
	balance: Float!
	"State of the channel"
	status: ChannelStatus!
	"Current epoch of the channel"
	epoch: Int!
	"Latest ticket index used in the channel"
	ticketIndex: Int!
	"Seconds until the channel is closed once closure is initiated"
	closureTime: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

type QueryRoot {
	"""
	Retrieve all accounts from the database

	Returns a complete list of all accounts. No filtering is available.
	"""
	accounts: [Account!]!
	"""
	Retrieve channels, optionally filtered by source and/or destination

	If neither source nor destination is provided, returns all channels.
	If source is provided, filters channels by source address.
	If destination is provided, filters channels by destination address.
	Both filters can be combined.
	"""
	channels(source: String, destination: String): [Channel!]!
	"""
	Retrieve HOPR token balance for a specific address

	The address parameter is required. Returns None if no balance exists for the address.
	"""
	hoprBalance(address: String!): HoprBalance
	"""
	Retrieve native token balance for a specific address

	The address parameter is required. Returns None if no balance exists for the address.
	"""
	nativeBalance(address: String!): NativeBalance
	"""
	Health check endpoint

	Returns "ok" to indicate the service is running
	"""
	health: String!
	"""
	API version information

	Returns the current version of the blokli-api package
	"""
	version: String!

	"""
	Retrieve chain information
	"""
	chainInfo: ChainInfo!
}

type ChannelUpdate {
	"Unique identifier for the payment channel in hexadecimal format"
	concreteChannelId: String!
	"On-chain address of the source node in hexadecimal format"
	source: String!
	"On-chain address of the destination node in hexadecimal format"
	destination: String!
	"Total amount of tokens allocated to the channel"
	balance: Float!
	"State of the channel"
	status: ChannelStatus!
	"Current epoch of the channel"
	epoch: Int!
	"Latest ticket index used in the channel"
	ticketIndex: Int!
	"Seconds until the channel is closed once closure is initiated"
	closureTime: Int!
}

type SubscriptionRoot {
	"""
	Subscribe to real-time updates of native and hopr balances
	Provides updates whenever there is a change in the native and HOPR token balance for an account.
	"""
	balanceUpdated(address: String!): Balance!

	"""
	Subscribe to real-time updates of payment channels
	Provides updates whenever there is a change in the state of a payment channel, including opening and closing a channel.
	"""
	channelUpdated: Channel!

	"""
	Subscribe to real-time updates of account information
	Provides updates whenever there is a change in account information, including balances and multiaddresses.
	"""
	accountUpdated: Account!
}

schema {
	query: QueryRoot
	subscription: SubscriptionRoot
}
