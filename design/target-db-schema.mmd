erDiagram
    account {
        int keyid PK "Custom incremental unique identifier, Primary key"
        binary(20) chain_key "Chain key (40-character hex string in bytes, NOT NULL)"
        binary(32) packet_key "Packet key (NOT NULL)"
        binary(20) safe_address FK "key to hopr safe (40-character hex string in bytes)"
        binary(8) published_block "Published block (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) published_tx_index "Published tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) published_log_index "Published log index (original u64 stored in bytes to preserve precision, NOT NULL)"
    }

    announcement {
        int id PK "Primary key"
        int account_keyid FK "Foreign key to account keyid (NOT NULL)"
        string multiaddress "Multiaddress (NOT NULL)"
        binary(8) published_block "Published block (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) published_tx_index "Published tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) published_log_index "Published log index (original u64 stored in bytes to preserve precision, NOT NULL)"
    }

    channel {
        int id PK "Primary key"
        binary(32) concrete_channel_id UK "Unique channel identifier (64-character hex string in bytes, NOT NULL)"
        int source FK "Source account ID (Foreign key to account keyid, NOT NULL)"
        int destination FK "Destination account ID (Foreign key to account keyid, NOT NULL)"
        binary(12) balance "Channel balance (original u96 stored in bytes to preserve precision, NOT NULL)"
        int status "Channel status (NOT NULL)"
        bigint epoch "Epoch (original u24, NOT NULL, default is 1)"
        bigint ticket_index "Ticket index (original u48, NOT NULL, default is 0)"
        datetime closure_time "Closure timestamp"
        bool corrupted_state "Corrupted state flag (NOT NULL, default is false)"
    }

    hopr_balance {
        int id PK "Primary key"
        binary(20) address UK "Unique address (40-character hex string in bytes, NOT NULL)"
        binary(32) balance "wxHOPR token balance (original u256 stored in bytes to preserve precision, NOT NULL)"
        binary(8) last_changed_block "Last changed block (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) last_changed_tx_index "Last changed tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) last_changed_log_index "Last changed log index (original u64 stored in bytes to preserve precision, NOT NULL)"
    }

    native_balance {
        int id PK "Primary key"
        binary(20) address UK "Unique address (40-character hex string in bytes, NOT NULL)"
        binary(32) balance "Native token balance (original u256 stored in bytes to preserve precision, NOT NULL)"
        binary(8) last_changed_block "Last changed block (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) last_changed_tx_index "Last changed tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) last_changed_log_index "Last changed log index (original u64 stored in bytes to preserve precision, NOT NULL)"
    }

    chain_info {
        int id PK "Primary key"
        binary(8) last_indexed_block "Last indexed block (original u64 stored in bytes to preserve precision)"
        binary(12) ticket_price "Ticket price"
        binary(32) channels_dst "Channels destination"
        binary(32) ledger_dst "Ledger destination"
        binary(32) safe_registry_dst "Safe registry destination"
        float min_incoming_ticket_win_prob "Min incoming ticket win probability"
    }

    log {
        int id PK "Primary key"
        binary(8) block "block number (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) tx_index "tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) log_index "log index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(32) block_hash "Block hash (NOT NULL)"
        binary(32) transaction_hash "Transaction hash (NOT NULL)"
        binary(20) address "Address (40-character hex string in bytes, NOT NULL)"
        binary topics "Topics (NOT NULL)"
        binary data "Data (NOT NULL)"
        bool removed "Removed flag (default is false)"
    }
    %% Composite unique constraint: UNIQUE(block_number, tx_index, log_index)

    log_status {
        int id PK "Primary key"
        int log_id FK "Foreign key to log (NOT NULL)"
        binary(8) block "block number (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) tx_index "tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) log_index "log index (original u64 stored in bytes to preserve precision, NOT NULL)"
        bool processed "Processed flag (default is false)"
        datetime processed_at "Processing timestamp"
        binary(32) checksum "Checksum"
    }
    %% Composite unique constraint: UNIQUE(block_number, tx_index, log_index)

    log_topic_info {
        int id PK "Primary key"
        binary(20) address "Address (40-character hex string in bytes, NOT NULL)"
        string(64) topic "topic (NOT NULL)"
    }

    hopr_safe_contract {
        int id PK "Primary key"
        binary(20) address UK "Unique contract address (40-character hex string in bytes, NOT NULL)"
        binary(8) deployed_block "block number (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) deployed_tx_index "tx index (original u64 stored in bytes to preserve precision, NOT NULL)"
        binary(8) deployed_log_index "log index (original u64 stored in bytes to preserve precision, NOT NULL)"
    }

    %% ========================================
    %% RELATIONSHIPS
    %% ========================================

    account ||--o{ announcement : "has many"
    account ||--o| hopr_balance : "has 0 or 1"
    account ||--o| native_balance : "has 0 or 1"
    account ||--o{ channel : "source of many"
    account ||--o{ channel : "destination of many"
    account ||--o| hopr_safe_contract : "has 0 or 1"
    log ||--o| log_status : "has 0 or 1"
